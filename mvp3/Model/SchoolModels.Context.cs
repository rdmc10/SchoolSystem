//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mvp3.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolEntities3 : DbContext
    {
        public SchoolEntities3()
            : base("name=SchoolEntities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ABSENCE> ABSENCEs { get; set; }
        public virtual DbSet<AVERAGE> AVERAGEs { get; set; }
        public virtual DbSet<CLASSROOM> CLASSROOMs { get; set; }
        public virtual DbSet<MARK> MARKs { get; set; }
        public virtual DbSet<SPECIALIZATION> SPECIALIZATIONs { get; set; }
        public virtual DbSet<SUBJECT> SUBJECTs { get; set; }
        public virtual DbSet<SUBJECT_CLASSROOM> SUBJECT_CLASSROOM { get; set; }
        public virtual DbSet<USER> USERs { get; set; }
        public virtual DbSet<USER_TYPE> USER_TYPE { get; set; }
    
        public virtual int AddAbsence(Nullable<int> subjectId, string date, Nullable<int> semester, Nullable<bool> canBeExcused, Nullable<bool> excused, Nullable<int> studentId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            var canBeExcusedParameter = canBeExcused.HasValue ?
                new ObjectParameter("canBeExcused", canBeExcused) :
                new ObjectParameter("canBeExcused", typeof(bool));
    
            var excusedParameter = excused.HasValue ?
                new ObjectParameter("excused", excused) :
                new ObjectParameter("excused", typeof(bool));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAbsence", subjectIdParameter, dateParameter, semesterParameter, canBeExcusedParameter, excusedParameter, studentIdParameter);
        }
    
        public virtual int AddClassMasterClassroomLink(Nullable<int> classMasterId, Nullable<int> classroomId)
        {
            var classMasterIdParameter = classMasterId.HasValue ?
                new ObjectParameter("classMasterId", classMasterId) :
                new ObjectParameter("classMasterId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClassMasterClassroomLink", classMasterIdParameter, classroomIdParameter);
        }
    
        public virtual int AddClassroom(Nullable<int> specializationId, Nullable<int> year, string name)
        {
            var specializationIdParameter = specializationId.HasValue ?
                new ObjectParameter("specializationId", specializationId) :
                new ObjectParameter("specializationId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddClassroom", specializationIdParameter, yearParameter, nameParameter);
        }
    
        public virtual int AddMark(Nullable<int> subjectId, Nullable<int> value, string date, Nullable<int> semester, Nullable<int> studentId, Nullable<bool> boolIsThesis)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(string));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var boolIsThesisParameter = boolIsThesis.HasValue ?
                new ObjectParameter("boolIsThesis", boolIsThesis) :
                new ObjectParameter("boolIsThesis", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMark", subjectIdParameter, valueParameter, dateParameter, semesterParameter, studentIdParameter, boolIsThesisParameter);
        }
    
        public virtual int AddSpecialization(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSpecialization", nameParameter);
        }
    
        public virtual int AddStudentClassroomLink(Nullable<int> studentId, Nullable<int> classroomId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudentClassroomLink", studentIdParameter, classroomIdParameter);
        }
    
        public virtual int AddSubject(string name, Nullable<bool> thesis)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var thesisParameter = thesis.HasValue ?
                new ObjectParameter("thesis", thesis) :
                new ObjectParameter("thesis", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSubject", nameParameter, thesisParameter);
        }
    
        public virtual int AddSubjectClassroomLink(Nullable<int> subjectId, Nullable<int> classroomId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSubjectClassroomLink", subjectIdParameter, classroomIdParameter);
        }
    
        public virtual int AddSubjectTeacherLink(Nullable<int> subjectId, Nullable<int> teacherId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSubjectTeacherLink", subjectIdParameter, teacherIdParameter);
        }
    
        public virtual int AddTeacherClassroomLink(Nullable<int> teacherId, Nullable<int> classroomId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTeacherClassroomLink", teacherIdParameter, classroomIdParameter);
        }
    
        public virtual int AddUser(string name, string username, string password, Nullable<int> typeId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("typeId", typeId) :
                new ObjectParameter("typeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", nameParameter, usernameParameter, passwordParameter, typeIdParameter);
        }
    
        public virtual int AddUserType(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserType", nameParameter);
        }
    
        public virtual int DeleteClassMasterClassroomLink(Nullable<int> classMasterId)
        {
            var classMasterIdParameter = classMasterId.HasValue ?
                new ObjectParameter("classMasterId", classMasterId) :
                new ObjectParameter("classMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClassMasterClassroomLink", classMasterIdParameter);
        }
    
        public virtual int DeleteClassroom(Nullable<int> classroomId)
        {
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClassroom", classroomIdParameter);
        }
    
        public virtual int DeleteMark(Nullable<int> markId)
        {
            var markIdParameter = markId.HasValue ?
                new ObjectParameter("markId", markId) :
                new ObjectParameter("markId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMark", markIdParameter);
        }
    
        public virtual int DeleteSpecialization(Nullable<int> specializationId)
        {
            var specializationIdParameter = specializationId.HasValue ?
                new ObjectParameter("specializationId", specializationId) :
                new ObjectParameter("specializationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSpecialization", specializationIdParameter);
        }
    
        public virtual int DeleteStudentClassroomLink(Nullable<int> studentId, Nullable<int> classroomId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudentClassroomLink", studentIdParameter, classroomIdParameter);
        }
    
        public virtual int DeleteSubject(Nullable<int> subjectId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSubject", subjectIdParameter);
        }
    
        public virtual int DeleteSubjectClassroomLink(Nullable<int> subjectId, Nullable<int> classroomId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSubjectClassroomLink", subjectIdParameter, classroomIdParameter);
        }
    
        public virtual int DeleteSubjectTeacherLink(Nullable<int> subjectId, Nullable<int> teacherId)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSubjectTeacherLink", subjectIdParameter, teacherIdParameter);
        }
    
        public virtual int DeleteTeacherClassroomLink(Nullable<int> teacherId, Nullable<int> classroomId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTeacherClassroomLink", teacherIdParameter, classroomIdParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIdParameter);
        }
    
        public virtual int DeleteUserType(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("userTypeId", userTypeId) :
                new ObjectParameter("userTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUserType", userTypeIdParameter);
        }
    
        public virtual int ExcuseAbsence(Nullable<int> absenceId)
        {
            var absenceIdParameter = absenceId.HasValue ?
                new ObjectParameter("absenceId", absenceId) :
                new ObjectParameter("absenceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExcuseAbsence", absenceIdParameter);
        }
    
        public virtual ObjectResult<GetAbsencesForASubject_Result> GetAbsencesForASubject(Nullable<int> studentId, Nullable<int> subjectId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAbsencesForASubject_Result>("GetAbsencesForASubject", studentIdParameter, subjectIdParameter);
        }
    
        public virtual ObjectResult<GetAbsencesForStudentForSubject_Result> GetAbsencesForStudentForSubject(Nullable<int> studentId, Nullable<int> subjectId, Nullable<int> semester)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAbsencesForStudentForSubject_Result>("GetAbsencesForStudentForSubject", studentIdParameter, subjectIdParameter, semesterParameter);
        }
    
        public virtual ObjectResult<GetAbsencesPerClassroom_Result> GetAbsencesPerClassroom(Nullable<int> classroomId)
        {
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAbsencesPerClassroom_Result>("GetAbsencesPerClassroom", classroomIdParameter);
        }
    
        public virtual ObjectResult<GetAllAbsencesForStudent_Result> GetAllAbsencesForStudent(Nullable<int> studentId, Nullable<int> semester)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAbsencesForStudent_Result>("GetAllAbsencesForStudent", studentIdParameter, semesterParameter);
        }
    
        public virtual ObjectResult<GetAllClassMasterClassroomLinks_Result> GetAllClassMasterClassroomLinks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllClassMasterClassroomLinks_Result>("GetAllClassMasterClassroomLinks");
        }
    
        public virtual ObjectResult<GetAllClassrooms_Result> GetAllClassrooms()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllClassrooms_Result>("GetAllClassrooms");
        }
    
        public virtual ObjectResult<GetAllMarks_Result> GetAllMarks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllMarks_Result>("GetAllMarks");
        }
    
        public virtual ObjectResult<GetAllSpecializations_Result> GetAllSpecializations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSpecializations_Result>("GetAllSpecializations");
        }
    
        public virtual ObjectResult<GetAllStudentClassroomLinks_Result> GetAllStudentClassroomLinks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStudentClassroomLinks_Result>("GetAllStudentClassroomLinks");
        }
    
        public virtual ObjectResult<GetAllSubjectClassroomLinks_Result> GetAllSubjectClassroomLinks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSubjectClassroomLinks_Result>("GetAllSubjectClassroomLinks");
        }
    
        public virtual ObjectResult<GetAllSubjects_Result> GetAllSubjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSubjects_Result>("GetAllSubjects");
        }
    
        public virtual ObjectResult<GetAllSubjectTeacherLinks_Result> GetAllSubjectTeacherLinks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSubjectTeacherLinks_Result>("GetAllSubjectTeacherLinks");
        }
    
        public virtual ObjectResult<GetAllTeacherClassroomLinks_Result> GetAllTeacherClassroomLinks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTeacherClassroomLinks_Result>("GetAllTeacherClassroomLinks");
        }
    
        public virtual ObjectResult<GetAllUsers_Result> GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUsers_Result>("GetAllUsers");
        }
    
        public virtual ObjectResult<GetAllUserTypes_Result> GetAllUserTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserTypes_Result>("GetAllUserTypes");
        }
    
        public virtual ObjectResult<GetAveragesForStudent_Result> GetAveragesForStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAveragesForStudent_Result>("GetAveragesForStudent", studentIdParameter);
        }
    
        public virtual ObjectResult<GetClassMasterClassroom_Result> GetClassMasterClassroom(Nullable<int> teacherId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClassMasterClassroom_Result>("GetClassMasterClassroom", teacherIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetClassroomIdForStudent(Nullable<int> studentId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetClassroomIdForStudent", studentIdParameter);
        }
    
        public virtual ObjectResult<GetMarksForASubject_Result> GetMarksForASubject(Nullable<int> studentId, Nullable<int> subjectId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMarksForASubject_Result>("GetMarksForASubject", studentIdParameter, subjectIdParameter);
        }
    
        public virtual ObjectResult<GetMarksForStudent_Result> GetMarksForStudent(Nullable<int> studentId, Nullable<int> subjectId, Nullable<int> semester)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMarksForStudent_Result>("GetMarksForStudent", studentIdParameter, subjectIdParameter, semesterParameter);
        }
    
        public virtual ObjectResult<GetStudentsFromClassroom_Result> GetStudentsFromClassroom(Nullable<int> classroomId)
        {
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentsFromClassroom_Result>("GetStudentsFromClassroom", classroomIdParameter);
        }
    
        public virtual ObjectResult<GetSubjectsForTeacherForSelectedClassroom_Result> GetSubjectsForTeacherForSelectedClassroom(Nullable<int> teacherId, Nullable<int> classroomId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubjectsForTeacherForSelectedClassroom_Result>("GetSubjectsForTeacherForSelectedClassroom", teacherIdParameter, classroomIdParameter);
        }
    
        public virtual ObjectResult<GetSubjectsFromClassroom_Result> GetSubjectsFromClassroom(Nullable<int> classroomId)
        {
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubjectsFromClassroom_Result>("GetSubjectsFromClassroom", classroomIdParameter);
        }
    
        public virtual ObjectResult<GetTeachersClassrooms_Result> GetTeachersClassrooms(Nullable<int> teacherId)
        {
            var teacherIdParameter = teacherId.HasValue ?
                new ObjectParameter("teacherId", teacherId) :
                new ObjectParameter("teacherId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeachersClassrooms_Result>("GetTeachersClassrooms", teacherIdParameter);
        }
    
        public virtual ObjectResult<GetUnexcusedAbsencesForStudent_Result> GetUnexcusedAbsencesForStudent(Nullable<int> studentId, Nullable<int> semester)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnexcusedAbsencesForStudent_Result>("GetUnexcusedAbsencesForStudent", studentIdParameter, semesterParameter);
        }
    
        public virtual ObjectResult<GetUnexcusedAbsencesPerClassroom_Result> GetUnexcusedAbsencesPerClassroom(Nullable<int> classroomId)
        {
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnexcusedAbsencesPerClassroom_Result>("GetUnexcusedAbsencesPerClassroom", classroomIdParameter);
        }
    
        public virtual ObjectResult<GetUser_Result> GetUser(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUser_Result>("GetUser", usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> GetUserType(Nullable<int> userTypeId)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("userTypeId", userTypeId) :
                new ObjectParameter("userTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserType", userTypeIdParameter);
        }
    
        public virtual int MakeAverage(Nullable<int> semester, Nullable<int> subjectId, Nullable<int> studentId)
        {
            var semesterParameter = semester.HasValue ?
                new ObjectParameter("semester", semester) :
                new ObjectParameter("semester", typeof(int));
    
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeAverage", semesterParameter, subjectIdParameter, studentIdParameter);
        }
    
        public virtual int ModifyClassMasterClassroomLink(Nullable<int> classMasterId, Nullable<int> classroomId)
        {
            var classMasterIdParameter = classMasterId.HasValue ?
                new ObjectParameter("classMasterId", classMasterId) :
                new ObjectParameter("classMasterId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyClassMasterClassroomLink", classMasterIdParameter, classroomIdParameter);
        }
    
        public virtual int ModifyClassroom(Nullable<int> classroomId, Nullable<int> specializationId, Nullable<int> year, string name)
        {
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            var specializationIdParameter = specializationId.HasValue ?
                new ObjectParameter("specializationId", specializationId) :
                new ObjectParameter("specializationId", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyClassroom", classroomIdParameter, specializationIdParameter, yearParameter, nameParameter);
        }
    
        public virtual int ModifySpecialization(Nullable<int> specializationId, string name)
        {
            var specializationIdParameter = specializationId.HasValue ?
                new ObjectParameter("specializationId", specializationId) :
                new ObjectParameter("specializationId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifySpecialization", specializationIdParameter, nameParameter);
        }
    
        public virtual int ModifyStudentClassroomLink(Nullable<int> studentId, Nullable<int> classroomId)
        {
            var studentIdParameter = studentId.HasValue ?
                new ObjectParameter("studentId", studentId) :
                new ObjectParameter("studentId", typeof(int));
    
            var classroomIdParameter = classroomId.HasValue ?
                new ObjectParameter("classroomId", classroomId) :
                new ObjectParameter("classroomId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyStudentClassroomLink", studentIdParameter, classroomIdParameter);
        }
    
        public virtual int ModifySubject(Nullable<int> subjectId, string name, Nullable<bool> thesis)
        {
            var subjectIdParameter = subjectId.HasValue ?
                new ObjectParameter("subjectId", subjectId) :
                new ObjectParameter("subjectId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var thesisParameter = thesis.HasValue ?
                new ObjectParameter("thesis", thesis) :
                new ObjectParameter("thesis", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifySubject", subjectIdParameter, nameParameter, thesisParameter);
        }
    
        public virtual int ModifyUser(Nullable<int> userId, string name, string username, string password)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyUser", userIdParameter, nameParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int ModifyUserType(Nullable<int> userTypeId, string name)
        {
            var userTypeIdParameter = userTypeId.HasValue ?
                new ObjectParameter("userTypeId", userTypeId) :
                new ObjectParameter("userTypeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyUserType", userTypeIdParameter, nameParameter);
        }
    }
}
